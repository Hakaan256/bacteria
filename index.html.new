<html>
<head>
<style type='text/css'>
body,div
{
  position:relative;
  overflow:auto;
  margin:0px;
  padding:0px;
  font-family:Helvetica Neue;
  font-size:18px;
}
body
{
}
.content /*outer-width: 1140px; 2*margin+paragraph*/
{
  width:1140px; /*margins+paragraphs*/
  margin:0px auto;
}
.title
{
  text-align:center;
}
.blurb
{
}
.margin /*outer-width: 240px*/
{
  width:200px;
  padding:10px;
  min-height:10px;
  float:left;
  font-style:italic;
}
.paragraph /*outer-width: 660px*/
{
  width:640px;
  padding:10px;
  float:left;
}
.experiment /* outer_width: 260*2 + 258 */
{
  margin:0px auto;
  width:798px;
}
.rules /* outer_width: 270 */
{
  width:250px;
  padding:10px;
  min-height:10px;
  float:left;
  font-size:16px;
}
.rule
{
  font-style:italic;
}
.new
{
  font-weight:bold;
}
.experiment_content /* outer_width:256+2(border) */
{
  width:258px;
  float:left;
  overflow:visible;
}
.stage_container /* outer_width:256+2(border) */
{
  width:258px;
  overflow:visible;
  user-select:none;
}
.shadow
{
  position:absolute;
  left:0px;
  width:256px;
  height:20px;
  display:block;
  pointer-events:none;
  user-select:none;
}
.reset
{
  position:absolute;
  height:30px;
  width:100px;
  text-align:center;
  line-height:28px;
  user-select:none;
  border:1px solid #EEEEEE;
}
.popup
{
  position:absolute;
  top:50px;
  left:250px;
  width:200px;
  height:50px;
  background-color:white;
  border:1px solid black;
  visibility:hidden;
  padding:10px;
}
.description
{
  width:540px;
  text-align:center;
  margin:0px auto 10px auto;
  font-style:italic;
}
.keyword
{
  font-style:italic;
}
.expired
{
  text-decoration:line-through;
}
</style>
<script type='text/javascript' src='src/config.js'></script>
<script type='text/javascript' src='src/utils/utils.js'></script>
<script type='text/javascript' src='src/utils/webgl-utils.js'></script>
<script type="text/javascript" src="src/canv.js"></script>
<script type="text/javascript" src="src/stage.js"></script>
<script type="text/javascript" src="src/game.js"></script>

<script type="text/javascript" src="src/doqueues/assetter.js"></script>
<script type="text/javascript" src="src/doqueues/clicker.js"></script>
<script type="text/javascript" src="src/doqueues/blurer.js"></script>
<script type="text/javascript" src="src/doqueues/keyer.js"></script>
<script type="text/javascript" src="src/doqueues/debugger.js"></script>
<script type="text/javascript" src="src/doqueues/dragger.js"></script>
<script type="text/javascript" src="src/doqueues/drawer.js"></script>
<script type="text/javascript" src="src/doqueues/flicker.js"></script>
<script type="text/javascript" src="src/doqueues/hoverer.js"></script>
<script type="text/javascript" src="src/doqueues/persistent_hoverer.js"></script>
<script type="text/javascript" src="src/doqueues/presser.js"></script>
<script type="text/javascript" src="src/doqueues/ticker.js"></script>
<script type="text/javascript" src="src/doqueues/particler.js"></script>
<script type="text/javascript" src="src/doqueues/objs/img.js"></script>
<script type="text/javascript" src="src/doqueues/objs/placer.js"></script>
<script type="text/javascript" src="src/doqueues/objs/input.js"></script>

<script type="text/javascript" src="src/scenes/nullScene.js"></script>
<script type="text/javascript" src="src/scenes/loadingScene.js"></script>
<script type="text/javascript" src="src/scenes/testScene.js"></script>
<script type="text/javascript" src="src/scenes/gameplayScene.js"></script>

<script type="text/javascript">
function $(id)
{
  return document.getElementById(id);
}

var d;
var g;
var g_basic;
var games = {};

function size_prefix(w,h,prefix)
{
  $(prefix+"experiment_content").style.width  = (w+2)+"px";
  $(prefix+"experiment_content").style.height = (h+52)+"px";
  $(prefix+"stage_container").style.width  = (w+2)+"px";
  $(prefix+"stage_container").style.height = (h)+"px";
  $(prefix+"shadow").style.top = (h)+"px";
  //$(prefix+"shadow").style.width = w+"px";
  $(prefix+"reset").style.top = (h+20)+"px";
  $(prefix+"reset").style.left = Math.round(w/2-50)+"px";
  $(prefix+"reset").addEventListener("click", function() { games[prefix].reset(); });
  //$(prefix+"popup") //don't really need to do anything...
}
function goExperiment()
{
  var prefix = "";
  var w = 640;
  var h = 320;
  //$("debug_div").style.width  = w+"px";
  //$("debug_div").style.height = h+"px";
  //d = new Debugger({source:$("debug_div")});

  var special = SPECIAL_NONE;
  var grid_x = 0;
  var grid_y = 0;
  var grid_w = -1;
  var grid_h = -1;
  var grid_cols = parseInt($("experiment_grid_cols").value);
  var grid_rows = parseInt($("experiment_grid_rows").value);
  var colored_rgb = $("experiment_attribute_color_rgb").checked;
  var default_r = 0.5;
  var default_g = 0.5;
  var default_b = 0.5;
  var colored_hsl = $("experiment_attribute_color_hsl").checked;
  var default_h = 150;
  var default_s = 1;
  var default_l = 0.7;
  var colorblind = false;
  var sim_speed = parseFloat($("experiment_sim_speed").value);
  var badb_sim_speed = 1;
  var allow_sim_speed_slider = false;
  var sim_speed_min = 1;
  var sim_speed_max = 2;
  var hover_to_play = true;
  var display_pause = true;
  var allow_dose_slider = $("experiment_allow_dose_slider").checked;
  var allow_dose_button = $("experiment_allow_dose_button").checked;
  var dose_chip_damage = $("experiment_dose_chip_damage").checked;
  var allow_smile = false;
  var allow_reset = true;
  var prompt_reset_on_empty = false;
  var allow_contaminate = false;
  var default_badb_resist = 0.;
  var init_badb = $("experiment_init_badb").checked;
  var reinit_badb = false;
  var default_good_resist = 0.;
  var allow_good = true;
  var init_good = $("experiment_init_good").checked;
  var reinit_good = false;
  var allow_body = true;
  var init_body = $("experiment_init_body").checked;
  var reinit_body = false;
  var swab_size = $("experiment_big_swab").checked ? 2 : 1;
  var click_function = $("experiment_click_func_none").checked ? CLICK_FUNC_NONE : $("experiment_click_func_badb").checked ? CLICK_FUNC_BADB : $("experiment_click_func_good").checked ? CLICK_FUNC_GOOD : $("experiment_click_func_body").checked ? CLICK_FUNC_BODY : $("experiment_click_func_kill").checked ? CLICK_FUNC_KILL : CLICK_FUNC_NONE;
  var hover_function = $("experiment_hover_func_none").checked ? CLICK_FUNC_NONE : $("experiment_hover_func_badb").checked ? CLICK_FUNC_BADB : $("experiment_hover_func_good").checked ? CLICK_FUNC_GOOD : $("experiment_hover_func_body").checked ? CLICK_FUNC_BODY : $("experiment_hover_func_kill").checked ? CLICK_FUNC_KILL : CLICK_FUNC_NONE;
  var show_hover = true;
  var prerequisite_fill_for_interaction = 0.;
  var prompt_prerequisite_unmet = false;
  var mutate_random_assign = $("experiment_mutate_random").checked;
  var mutate_rate = parseFloat($("experiment_mutate_rate").value);
  var mutate_distance = parseFloat($("experiment_mutate_distance").value);
  var bias_mutate = false;
  var reproduce = $("experiment_reproduce").checked;
  var age = $("experiment_age").checked;
  var ave_display_width = (!colored_rgb && !colored_hsl) ? 10 : 0;
  var split_display_width = (!colored_rgb && !colored_hsl && init_badb && init_good) ? 10 : 0;
  var tricolor_display_width = colored_rgb ? 10 : 0;
  var hsl_display_width = colored_hsl ? 10 : 0;


  prefix = "experiment_";
  var expcontainer = $(prefix+"stage_container");
  while(expcontainer.firstChild) expcontainer.removeChild(expcontainer.firstChild);

  w = 256 + ave_display_width + split_display_width + tricolor_display_width + hsl_display_width;
  grid_w = 256; //hardcoded...
  h = 256;
  size_prefix(w,h,prefix);
  g = new Game({width:w,height:h,container:prefix+"stage_container",popup:prefix+"popup",
    config:
    {
      special:special,
      grid_x:grid_x,
      grid_y:grid_y,
      grid_w:grid_w,
      grid_h:grid_h,
      grid_cols:grid_cols,
      grid_rows:grid_rows,
      colored_rgb:colored_rgb,
      default_r:default_r,
      default_g:default_g,
      default_b:default_b,
      colored_hsl:colored_hsl,
      default_h:default_h,
      default_s:default_s,
      default_l:default_l,
      colorblind:colorblind,
      sim_speed:sim_speed,
      badb_sim_speed:badb_sim_speed,
      allow_sim_speed_slider:allow_sim_speed_slider,
      sim_speed_min:sim_speed_min,
      sim_speed_max:sim_speed_max,
      hover_to_play:hover_to_play,
      display_pause:display_pause,
      allow_dose_slider:allow_dose_slider,
      allow_dose_button:allow_dose_button,
      dose_chip_damage:dose_chip_damage,
      allow_smile:allow_smile,
      allow_reset:allow_reset,
      prompt_reset_on_empty:prompt_reset_on_empty,
      allow_contaminate:allow_contaminate,
      default_badb_resist:default_badb_resist,
      init_badb:init_badb,
      reinit_badb:reinit_badb,
      default_good_resist:default_good_resist,
      allow_good:allow_good,
      init_good:init_good,
      reinit_good:reinit_good,
      allow_body:allow_body,
      init_body:init_body,
      reinit_body:reinit_body,
      swab_size:swab_size,
      click_function:click_function,
      hover_function:hover_function,
      show_hover:show_hover,
      prerequisite_fill_for_interaction:prerequisite_fill_for_interaction,
      prompt_prerequisite_unmet:prompt_prerequisite_unmet,
      mutate_random_assign:mutate_random_assign,
      mutate_rate:mutate_rate,
      mutate_distance:mutate_distance,
      bias_mutate:bias_mutate,
      reproduce:reproduce,
      age:age,
      ave_display_width:ave_display_width,
      split_display_width:split_display_width,
      tricolor_display_width:tricolor_display_width,
      hsl_display_width:hsl_display_width,
    }
  });
  games[prefix] = g;
  g.begin();
}

function begin()
{
  var prefix = "";
  var w = 640;
  var h = 320;
  //$("debug_div").style.width  = w+"px";
  //$("debug_div").style.height = h+"px";
  //d = new Debugger({source:$("debug_div")});

  prefix = "basic_";
  w = 256;
  h = 256;
  size_prefix(w,h,prefix);
  g = new Game({width:w,height:h,container:prefix+"stage_container",popup:prefix+"popup",
    config:
    {
      special:SPECIAL_NONE,
      grid_x:0,
      grid_y:0,
      grid_w:-1,
      grid_h:-1,
      grid_cols:10,
      grid_rows:10,
      colored_rgb:false,
      default_r:0.5,
      default_g:0.5,
      default_b:0.5,
      colored_hsl:false,
      default_h:150,
      default_s:1,
      default_l:0.7,
      colorblind:false,
      sim_speed:1,
      badb_sim_speed:1,
      allow_sim_speed_slider:false,
      sim_speed_min:1,
      sim_speed_max:2,
      hover_to_play:true,
      display_pause:true,
      allow_dose_slider:false,
      allow_dose_button:false,
      dose_chip_damage:false,
      allow_smile:false,
      allow_reset:true,
      prompt_reset_on_empty:false,
      allow_contaminate:false,
      default_badb_resist:0.,
      init_badb:false,
      reinit_badb:false,
      default_good_resist:0.,
      allow_good:false,
      init_good:false,
      reinit_good:false,
      allow_body:false,
      init_body:false,
      reinit_body:false,
      swab_size:1,
      click_function:CLICK_FUNC_BADB,
      hover_function:CLICK_FUNC_NONE,
      show_hover:false,
      prerequisite_fill_for_interaction:0.,
      prompt_prerequisite_unmet:false,
      mutate_random_assign:false,
      mutate_rate:0,
      mutate_distance:0,
      bias_mutate:false,
      reproduce:true,
      age:true,
      ave_display_width:0,
      split_display_width:0,
      tricolor_display_width:0,
      hsl_display_width:0,
    }
  });
  games[prefix] = g;
  g.begin();

  prefix = "biodiversity_";
  w = 256;
  h = 256;
  size_prefix(w,h,prefix);
  g = new Game({width:w,height:h,container:prefix+"stage_container",popup:prefix+"popup",
    config:
    {
      special:SPECIAL_NONE,
      grid_x:0,
      grid_y:0,
      grid_w:-1,
      grid_h:-1,
      grid_cols:10,
      grid_rows:10,
      colored_rgb:false,
      default_r:0.5,
      default_g:0.5,
      default_b:0.5,
      colored_hsl:false,
      default_h:150,
      default_s:1,
      default_l:0.7,
      colorblind:false,
      sim_speed:1,
      badb_sim_speed:1,
      allow_sim_speed_slider:false,
      sim_speed_min:1,
      sim_speed_max:2,
      hover_to_play:true,
      display_pause:true,
      allow_dose_slider:false,
      allow_dose_button:false,
      dose_chip_damage:false,
      allow_smile:false,
      allow_reset:true,
      prompt_reset_on_empty:false,
      allow_contaminate:false,
      default_badb_resist:0.,
      init_badb:false,
      reinit_badb:false,
      default_good_resist:0.,
      allow_good:false,
      init_good:false,
      reinit_good:false,
      allow_body:false,
      init_body:false,
      reinit_body:false,
      swab_size:1,
      click_function:CLICK_FUNC_BADB,
      hover_function:CLICK_FUNC_NONE,
      show_hover:false,
      prerequisite_fill_for_interaction:0.,
      prompt_prerequisite_unmet:false,
      mutate_random_assign:false,
      mutate_rate:1,
      mutate_distance:0.2,
      bias_mutate:false,
      reproduce:true,
      age:true,
      ave_display_width:0,
      split_display_width:0,
      tricolor_display_width:0,
      hsl_display_width:0,
    }
  });
  games[prefix] = g;
  g.begin();

  prefix = "killbutton_";
  w = 356;
  h = 256;
  size_prefix(w,h,prefix);
  g = new Game({width:w,height:h,container:prefix+"stage_container",popup:prefix+"popup",
    config:
    {
      special:SPECIAL_NONE,
      grid_x:0,
      grid_y:0,
      grid_w:256,
      grid_h:-1,
      grid_cols:10,
      grid_rows:10,
      colored_rgb:false,
      default_r:0.5,
      default_g:0.5,
      default_b:0.5,
      colored_hsl:false,
      default_h:150,
      default_s:1,
      default_l:0.7,
      colorblind:false,
      sim_speed:1,
      badb_sim_speed:1,
      allow_sim_speed_slider:false,
      sim_speed_min:1,
      sim_speed_max:2,
      hover_to_play:true,
      display_pause:true,
      allow_dose_slider:false,
      allow_dose_button:true,
      dose_chip_damage:true,
      allow_smile:false,
      allow_reset:true,
      prompt_reset_on_empty:true,
      allow_contaminate:false,
      default_badb_resist:0.,
      init_badb:true,
      reinit_badb:false,
      default_good_resist:0.,
      allow_good:false,
      init_good:false,
      reinit_good:false,
      allow_body:false,
      init_body:false,
      reinit_body:false,
      swab_size:1,
      click_function:CLICK_FUNC_NONE,
      hover_function:CLICK_FUNC_NONE,
      show_hover:false,
      prerequisite_fill_for_interaction:0.,
      prompt_prerequisite_unmet:false,
      mutate_random_assign:false,
      mutate_rate:1,
      mutate_distance:0.2,
      bias_mutate:false,
      reproduce:true,
      age:true,
      ave_display_width:10,
      split_display_width:0,
      tricolor_display_width:0,
      hsl_display_width:0,
    }
  });
  games[prefix] = g;
  g.begin();

  goExperiment();
}
window.addEventListener('touchstart', function(e){ e.preventDefault() }); //prevent browser from doing anything funny
window.addEventListener("load",begin,false);
</script>

</head>
<body>

<div class="content">
  <div class="title">
    <h1>Antibiotic Resistance!</h1>
  </div>

  <div class="blurb">
    <div class="margin margin_left">
    </div>
    <div class="paragraph">
      &nbsp;&nbsp;&nbsp;&nbsp;What is <span class="keyword">antibiotic resistance</span>, why is it bad, and what can we do about it. Let's create a <span class="keyword">model</span> of bacteria to help us explore these questions, and hopefully find some answers. We'll start with three simple rules.<br /><br />
    </div>
    <div class="margin margin_right">
    </div>
  </div>

  <div class="description">
    Click to add.
  </div>
  <div class="experiment">
    <div class="rules rules_left">
      <br />
      <br />
      <br />
      In this Model:<br />
      <span class="rule new">- Bacteria are squares</span><br />
      <span class="rule new">- Bacteria sometimes reproduce</span><br />
      <span class="rule new">- Bacteria eventually die</span><br />
    </div>
    <div class="experiment_content" id="basic_experiment_content">
      <div class="stage_container" id="basic_stage_container"> </div>
      <img class="shadow" id="basic_shadow" src="assets/shadow.png" />
      <div class="reset" id="basic_reset"/>Reset</div>
      <div class="popup" id="basic_popup"/>Wow! Watch those bacteria go!</div>
    </div>
    <div class="rules rules_right">
    </div>
  </div>

  <div class="blurb">
    <div class="margin margin_left">
    </div>
    <div class="paragraph">
      &nbsp;&nbsp;&nbsp;&nbsp;That looks vaguely bacteria-esque... To make this little simulation more interesting, we'll next add <span class="keyword">inheritance</span> and <span class="keyword">mutation</span>.<br /><br />
      &nbsp;&nbsp;&nbsp;&nbsp;Every <span class="keyword">attribute</span> of a bacterium (its shape, size, behavior) is encoded into its <span class="keyword">DNA</span>. This <span class="keyword">DNA</span> gets passed onto its children, giving the kid the same set of <span class="keyword">attributes</span> as its parent. Sometimes, the <span class="keyword">DNA</span> replication goes less than perfect, resulting in differences in the new bacterium's <span class="keyword">attributes</span>- sometimes small, and sometimes drastic.<br /><br />
      &nbsp;&nbsp;&nbsp;&nbsp;We'll add <i>lightness</i> (as an arbitrary <span class="keyword">attribute</span>) to our model, and ensure it gets inherited during reproduction. But we'll also allow small <span class="keyword">mutations</span> in the reproductive process, and thus changes in lightness, to occur.<br /><br />
    </div>
    <div class="margin margin_right">
    </div>
  </div>

  <div class="description">
    Biodiversity!
  </div>
  <div class="experiment">
    <div class="rules rules_left">
      <br />
      In this Model:<br />
      <span class="rule">- Bacteria are squares</span><br />
      <span class="rule">- Bacteria sometimes multiply</span><br />
      <span class="rule">- Bacteria eventually die</span><br />
      <span class="rule new">- Bacteria exhibit the attribute "lightness"</span><br />
      <span class="rule new">- Bacteria inherit thier attributes from their parents</span><br />
      <span class="rule new">- Bacteria sometimes mutate in their inherited attributes</span><br />
    </div>
    <div class="experiment_content"  id="biodiversity_experiment_content">
      <div class="stage_container" id="biodiversity_stage_container"> </div>
      <img class="shadow" id="biodiversity_shadow" src="assets/shadow.png" />
      <div class="reset" id="biodiversity_reset"/>Reset</div>
      <div class="popup" id="biodiversity_popup"/>Wow! Watch those bacteria go!</div>
    </div>
    <div class="rules rules_right">
    </div>
  </div>

  <div class="blurb">
    <div class="margin margin_left">
    </div>
    <div class="paragraph">
      &nbsp;&nbsp;&nbsp;&nbsp;You can watch how <span class="keyword">mutations</span> lead to small communities similar in lightness.<br /><br />
      &nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">Antibiotic resistance</span> -like lightness- is just another <span class="keywrod">attribute</span>, and thus follows the same set of rules regarding its propagation. It is a bit more interesting, however, in that within certain environments, it can play an important role in the bacterium's ability to reproduce.<br /><br />
      &nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">Antibiotics</span> are substances known to have bacteria-killing properties. In turn, <span class="keyword">antibiotic resistance</span> is a bacterium's general ability to survive in spite of the presence of such substances.<br /><br />
      &nbsp;&nbsp;&nbsp;&nbsp;If a bacterium cannot survive, it cannot reproduce. Let's look how this might affect attribute population differently than in our previous model.<br /><br />
      &nbsp;&nbsp;&nbsp;&nbsp;We'll update the simulation to use "lightness" as a stand-in for <span class="keyword">antibiotic resistance</span> (the darker the bacterium, the more resistant it is to antibiotics) and add the ability to apply <span class="keyword">antibiotics</span> to the population with a button.<br /><br />
    </div>
    <div class="margin margin_right">
    </div>
  </div>

  <div class="description">
    Press the button to apply antibiotics.
  </div>
  <div class="experiment">
    <div class="rules rules_left">
      <br />
      In this Model:<br />
      <span class="rule">- Bacteria are squares</span><br />
      <span class="rule">- Bacteria sometimes multiply</span><br />
      <span class="rule">- Bacteria eventually die</span><br />
      <span class="rule new">- Bacteria exhibit the <span class="keyword">attribute</span> "antibiotic resistance"</span><br />
      <span class="rule">- Bacteria inherit thier attributes from their parents</span><br />
      <span class="rule">- Bacteria sometimes mutate in their inherited properties</span><br />
      <span class="rule new">- Bacteria with greater antibiotic resistance are harder to kill</span><br />
    </div>
    <div class="experiment_content"  id="killbutton_experiment_content">
      <div class="stage_container" id="killbutton_stage_container"> </div>
      <img class="shadow" id="killbutton_shadow" src="assets/shadow.png" />
      <div class="reset" id="killbutton_reset"/>Reset</div>
      <div class="popup" id="killbutton_popup"/>Wow! Watch those bacteria go!</div>
    </div>
    <div class="rules rules_right">
    </div>
  </div>

  <div class="blurb">
    <div class="margin margin_left">
    </div>
    <div class="paragraph">
      &nbsp;&nbsp;&nbsp;&nbsp;Well that was much easier! Hit reset and try applying different threshholds at different times. Pay attention to how the bacteria responds.<br /><br />
      &nbsp;&nbsp;&nbsp;&nbsp;<br /><br />
    </div>
    <div class="margin margin_right">
    </div>
  </div>

  <div class="description">
    Use the slider to quantify antibiotics. Press the button to apply.
  </div>
  <div class="experiment">
    <div class="rules rules_left">
      <br />
      <br />
      <br />
      In this Model: <br />
      <span class="rule">Grid Cols: <input id="experiment_grid_cols" type="number" value="10"></input></span><br />
      <span class="rule">Grid Rows: <input id="experiment_grid_rows" type="number" value="10"></input></span><br />
      <span class="rule">Attribute:
        <input id="experiment_attribute_color_rgb" type="radio" name="attribute" value="color_rgb" checked="checked"></input>
        <input id="experiment_attribute_color_hsl" type="radio" name="attribute" value="color_hsl"></input>
        <input id="experiment_attribute_antibio" type="radio" name="attribute" value="antibio"></input>
      </span><br />
      <span class="rule">Sim Speed: <input id="experiment_sim_speed" type="number" value="1"></input></span><br />
      <span class="rule">Dose Slider: <input id="experiment_allow_dose_slider" type="checkbox"></input></span><br />
      <span class="rule">Dose Button: <input id="experiment_allow_dose_button" type="checkbox"></input></span><br />
      <span class="rule">Chip damage: <input id="experiment_dose_chip_damage" type="checkbox"></input></span><br />
      <span class="rule">Init Badb: <input id="experiment_init_badb" type="checkbox" checked="checked"></input></span><br />
      <span class="rule">Init Goodb: <input id="experiment_init_good" type="checkbox"></input></span><br />
      <span class="rule">Init Body: <input id="experiment_init_body" type="checkbox"></input></span><br />
      <span class="rule">Big Swab: <input id="experiment_big_swab" type="checkbox"></input></span><br />
      <span class="rule">Click Func:
        <input id="experiment_click_func_none" type="radio" name="click_func" value="none" checked="checked"></input>
        <input id="experiment_click_func_badb" type="radio" name="click_func" value="badb"></input>
        <input id="experiment_click_func_good" type="radio" name="click_func" value="good"></input>
        <input id="experiment_click_func_body" type="radio" name="click_func" value="body"></input>
        <input id="experiment_click_func_kill" type="radio" name="click_func" value="kill"></input>
      </span><br />
      <span class="rule">Hover Func:
        <input id="experiment_hover_func_none" type="radio" name="hover_func" value="none" checked="checked"></input>
        <input id="experiment_hover_func_badb" type="radio" name="hover_func" value="badb"></input>
        <input id="experiment_hover_func_good" type="radio" name="hover_func" value="good"></input>
        <input id="experiment_hover_func_body" type="radio" name="hover_func" value="body"></input>
        <input id="experiment_hover_func_kill" type="radio" name="hover_func" value="kill"></input>
      </span><br />
      <span class="rule">Mutate Random: <input id="experiment_mutate_random" type="checkbox"></input></span><br />
      <span class="rule">Mutate rate: <input id="experiment_mutate_rate" type="number" value="1"></input></span><br />
      <span class="rule">Mutate distance: <input id="experiment_mutate_distance" type="number" value="1"></input></span><br />
      <span class="rule">Reproduce: <input id="experiment_reproduce" type="checkbox" checked="checked"></input></span><br />
      <span class="rule">Age: <input id="experiment_age" type="checkbox" checked="checked"></input></span><br />
      <span class="rule">Go! <input id="experiment_go" type="button" onclick="goExperiment()"></input></span><br />
    </div>
    <div class="experiment_content"  id="experiment_experiment_content">
      <div class="stage_container" id="experiment_stage_container"> </div>
      <img class="shadow" id="experiment_shadow" src="assets/shadow.png" />
      <div class="reset" id="experiment_reset"/>Reset</div>
      <div class="popup" id="experiment_popup"/>Wow! Watch those bacteria go!</div>
    </div>
    <div class="rules rules_right">
    </div>
  </div>

</div>

</body>
</html>

